#!/usr/bin/env node

var jesus = require(".."),
    asciitable = require("asciitable");

var logStream = process.stdout;

var log = function(level, summary, info) {
  logStream.write(JSON.stringify([(new Date()).toISOString(), level.toUpperCase(), summary, info]) + "\n");
};

["debug", "info", "warning", "error"].forEach(function(level) {
  log[level] = log.bind(null, level);
});

if (process.argv[2] === "daemon") {
  require("child_process").spawn("node", [process.argv[1], "listen"].concat(process.argv.slice(3)), {
    detached: true,
    cwd: process.cwd(),
    stdio: "ignore",
  }).unref();
}

if (process.argv[2] === "listen") {
  var server = jesus.createServer().listen();

  if (process.argv[3]) {
    logStream = require("fs").createWriteStream(process.argv[3]);
  }

  process.on("uncaughtException", function(err) {
    server.jesus.stopAll();

    console.warn(err);
    console.warn(err.stack);

    setImmediate(function() {
      process.exit(1);
    });
  });

  server.on("clientConnected", function() {
    log.info("client connected");
  });

  server.on("clientDisconnected", function() {
    log.info("client disconnected");
  });

  server.on("command", function(command) {
    log.info("command", command);
  });

  ["processStarted", "processExited", "processError", "processTerminated"].forEach(function(event) {
    server.jesus.on(event, function(info) {
      log.info(event.replace(/([a-z])([A-Z])/, "$1 $2").toLowerCase(), info);
    });
  });
}

if (process.argv[2] === "start") {
  jesus.connect().callRemote("start", process.argv.slice(4), {
    id: process.argv[3],
    cwd: process.cwd(),
  }, function(err, info) {
    if (err) {
      dump_error(err);
    }

    dump_processes([info]);
  });
}

if (process.argv[2] === "stop") {
  jesus.connect().callRemote("stop", process.argv[3], function(err, info) {
    if (err) {
      dump_error(err);
    }

    dump_processes([info]);
  });
}

if (process.argv[2] === "restart") {
  jesus.connect().callRemote("restart", process.argv[3], function(err, info) {
    if (err) {
      dump_error(err);
    }

    dump_processes([info]);
  });
}

if (process.argv[2] === "check") {
  jesus.connect().callRemote("check", process.argv[3], function(err, info) {
    if (err) {
      dump_error(err);
    }

    dump_processes([info]);
  });
}

if (process.argv[2] === "restartall") {
  jesus.connect().callRemote("restartAll", function(err, list) {
    if (err) {
      dump_error(err);
    }

    dump_processes(list);
  });
}

if (process.argv[2] === "list") {
  jesus.connect().callRemote("list", function(err, list) {
    if (err) {
      dump_error(err);
    }

    dump_processes(list);
  });
}

function dump_error(err) {
  console.warn("");
  console.warn("Server returned error: " + err);
  console.warn("");

  process.exit(1);
}

function dump_processes(list) {
  var options = {
    columns: [
      {name: "ID", field: "id"},
      {name: "PID", field: "pid"},
      {name: "Restarts", field: "restarts"},
      {name: "Last Started", field: "lastStarted"},
      {name: "Command", field: "command"},
    ],
  };

  console.log(asciitable(options, list.sort(function(a, b) { return a.id === b.id ? 0 : a.id > b.id ? 1 : -1; }).map(function(e) {
    return {
      id: e.id,
      pid: e.pid.toString(10),
      restarts: e.started.length.toString(10),
      lastStarted: e.started[e.started.length-1],
      command: e.args.join(" "),
    };
  })));

  process.exit(0);
}
