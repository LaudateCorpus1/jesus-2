#!/usr/bin/env node

var jesus = require(".."),
    asciitable = require("asciitable"),
    leg = require("leg"),
    packageInfo = require("../package.json"),
    parstack = require("parstack"),
    vagueTime = require("vague-time");

var print_help = function print_help() {
  console.warn("");
  console.warn("Usage: jesus <action> [options]");
  console.warn("");
  console.warn("  The `action' portion of the command is case-insensitive");
  console.warn("");
  console.warn("Actions:");
  console.warn("");
  console.warn("  help");
  console.warn("    you're looking at it!");
  console.warn("");
  console.warn("  listen [file]");
  console.warn("    start jesus supervisor, writing output to `file' if specified,");
  console.warn("    otherwise stdout (console)");
  console.warn("");
  console.warn("  daemon [file]");
  console.warn("    same as above, but put the listening process in the background");
  console.warn("");
  console.warn("  start <process name> [command ...]");
  console.warn("    start a process");
  console.warn("");
  console.warn("  stop <process name>");
  console.warn("    stop a process by name");
  console.warn("");
  console.warn("  stopAll");
  console.warn("    stop all processes");
  console.warn("");
  console.warn("  restart <process name>");
  console.warn("    restart a process by name");
  console.warn("");
  console.warn("  restartAll");
  console.warn("    restart all processes");
  console.warn("");
  console.warn("  check <process name>");
  console.warn("    check the status of a process by name");
  console.warn("");
  console.warn("  list");
  console.warn("    check the status of all processes");
  console.warn("");
};

var dump_error = function dump_error(err) {
  console.warn("");
  console.warn("Server reported error: %j", err);
  console.warn("");

  process.exit(1);
};

var dump_local_error = function dump_local_error(err) {
  if (err.message === "connect ECONNREFUSED") {
    console.warn("");
    console.warn("It looks like there's no jesus daemon running!");
    console.warn("");
    console.warn("You probably want to run `jesus daemon /path/to/log/file'");
    console.warn("");
    console.warn("In case this diagnosis is wrong, here's an error trace:");
  } else {
    console.warn("");
    console.warn("An error occurred and it's not clear what caused it!");
    console.warn("");
    console.warn("Please post an issue about the error trace below:");
    console.warn("");
    console.warn("  https://github.com/deoxxa/jesus/issues/new");
    console.warn("");
    console.warn("Or just click this link and send me an email:");
    console.warn("");
    console.warn("  mailto:deoxxa@fknsrs.biz?subject=Jesus%20Is%20Broken%21&body=" + escape([
      err.stack,
      ["jesus", packageInfo.version].join("@"),
      JSON.stringify(process.versions, null, 2),
    ].join("\n\n")));
  }

  console.warn("");
  console.warn(err.stack);
  console.warn("");

  process.exit(1);
};

var dump_processes = function dump_processes(list) {
  var options = {
    columns: [
      {name: "ID", field: "id"},
      {name: "PID", field: "pid"},
      {name: "Restarts", field: "restarts"},
      {name: "Uptime", field: "uptime"},
      {name: "Command", field: "command"},
    ],
    skinny: true,
    intersectionCharacter: "`",
  };

  console.log(asciitable(options, list.sort(function(a, b) { return a.id === b.id ? 0 : a.id > b.id ? 1 : -1; }).map(function(e) {
    return {
      id: e.id,
      pid: e.pid.toString(10),
      restarts: e.started.length.toString(10),
      uptime: vagueTime.get({from: new Date(), to: new Date(e.started[e.started.length-1])}).replace(/ ago$/, ""),
      command: e.args.join(" "),
    };
  })));

  process.exit(0);
};

var action_help = function action_help(argv) {
  print_help();

  process.exit(0);
};

var action_unknown = function action_unknown(action, argv) {
  console.warn("");
  console.warn("Unknown action `%s'", action);

  print_help();

  process.exit(1);
};

var action_listen = function action_listen(argv) {
  var logStream = process.stdout,
      log = null;

  var server = jesus.createServer().listen();

  if (process.argv[3]) {
    logStream = require("fs").createWriteStream(process.argv[3], {flags: "a"});
  } else {
    logStream = process.stdout;
  }

  log = leg(logStream);

  log.info("started", {});

  process.on("uncaughtException", function(err) {
    server.jesus.stopAll();

    log.error("exception", {err: parstack(err)});

    setImmediate(function() {
      process.exit(1);
    });
  });

  server.on("clientConnected", function() {
    log.info("client connected", {});
  });

  server.on("clientDisconnected", function() {
    log.info("client disconnected", {});
  });

  server.on("command", function(command) {
    log.info("command", {jesus: {command: command}});
  });

  ["processStarted", "processExited", "processError", "processTerminated"].forEach(function(event) {
    server.jesus.on(event, function(info) {
      log.info(event.replace(/([a-z])([A-Z])/, "$1 $2").toLowerCase(), {jesus: {process: info}});
    });
  });
};

var action_daemon = function action_daemon(argv) {
  require("child_process").spawn("node", [process.argv[1], "listen"].concat(process.argv.slice(3)), {
    detached: true,
    cwd: process.cwd(),
    stdio: "ignore",
  }).unref();
};

var action_start = function action_start(argv) {
  jesus.connect().on("error", dump_local_error).callRemote("start", process.argv.slice(4), {
    id: process.argv[3],
    cwd: process.cwd(),
  }, function(err, info) {
    if (err) {
      dump_error(err);
    }

    dump_processes([info]);
  });
};

var action_stop = function action_stop(argv) {
  jesus.connect().on("error", dump_local_error).callRemote("stop", process.argv[3], function(err, info) {
    if (err) {
      dump_error(err);
    }

    dump_processes([info]);
  });
};

var action_stopAll = function action_stopAll(argv) {
  jesus.connect().on("error", dump_local_error).callRemote("stopAll", function(err, list) {
    if (err) {
      dump_error(err);
    }

    dump_processes(list);
  });
};

var action_restart = function action_restart(argv) {
  jesus.connect().on("error", dump_local_error).callRemote("restart", process.argv[3], function(err, info) {
    if (err) {
      dump_error(err);
    }

    dump_processes([info]);
  });
};

var action_restartAll = function action_restartAll(argv) {
  jesus.connect().on("error", dump_local_error).callRemote("restartAll", function(err, list) {
    if (err) {
      dump_error(err);
    }

    dump_processes(list);
  });
};

var action_check = function action_check(argv) {
  jesus.connect().on("error", dump_local_error).callRemote("check", process.argv[3], function(err, info) {
    if (err) {
      dump_error(err);
    }

    dump_processes([info]);
  });
};

var action_list = function action_list(argv) {
  jesus.connect().on("error", dump_local_error).callRemote("list", function(err, list) {
    if (err) {
      dump_error(err);
    }

    dump_processes(list);
  });
};

var argv = process.argv.slice(2);

var action = (argv.shift() || "help").toLowerCase();

switch (action) {
  case "listen": action_listen(argv); break;
  case "daemon": action_daemon(argv); break;
  case "start": action_start(argv); break;
  case "stop": action_stop(argv); break;
  case "stopall": action_stopAll(argv); break;
  case "restart": action_restart(argv); break;
  case "restartall": action_restartAll(argv); break;
  case "check": action_check(argv); break;
  case "list": action_list(argv); break;
  case "help": action_help(argv); break;
  default: action_unknown(action, argv); break;
}
